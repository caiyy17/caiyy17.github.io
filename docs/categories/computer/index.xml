<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer on caiyy17</title>
    <link>https://caiyy17.github.io/categories/computer/</link>
    <description>Recent content in Computer on caiyy17</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://caiyy17.github.io/categories/computer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VPS3:githubio博客和VPN</title>
      <link>https://caiyy17.github.io/posts/computer/vps4_%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/vps4_%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 之前使用 VPS 搭建个人博客和代理，但是这样需要时刻维护服务器，其实还是占用了不少时间和精力，为了最方便地使用，目前使用 hugo 博客搭配 githubio 使用，而代理则使用成品代理，有专人替你维护。
HUGO 安装 HUGO 是基于 go 的博客框架，编译起来比之前基于 node 的 js 框架要快非常多。
Install Hugo
brew install hugo 然后选一个主题即可，我这边选择的是 PaperMod，使用 git submodule 安装：
Install PaperMod
部署到 Github 设置参照 theme 给的例子即可，需要注意的是部署到 github 需要将
publishDir = &amp;#34;docs&amp;#34; 加在配置中，然后在 githubio 设置中将发布路径改为 docs，这样不用设置另外分支，非常方便。
生成网页 博客直接在 posts 中用 md 编写即可，需要发布时先用 hugo 命令生成，然后同步 github 的 repo
hugo -D </description>
    </item>
    
    <item>
      <title>yubikey3:后续设置</title>
      <link>https://caiyy17.github.io/posts/computer/yubikey3_%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/yubikey3_%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 使用 yubikey 还是非常麻烦&amp;hellip;本着简单好用的原则，我还是使用了更简单的管理方式。
密码管理 目前个人密码使用 icloud 的 keychain 管理，并且存留一封使用 master 密码加密的压缩包离线保存于硬盘中。重要网站使用随机生成的单独密码。
而 OTP 则使用手机上的密码管理器，比如 google authenticator</description>
    </item>
    
    <item>
      <title>备份:各种环境的备份与重装</title>
      <link>https://caiyy17.github.io/posts/computer/%E5%A4%87%E4%BB%BD_%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E9%87%8D%E8%A3%85/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/%E5%A4%87%E4%BB%BD_%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E9%87%8D%E8%A3%85/</guid>
      <description>前言 每一次大更新设备时，总想要有一个新的干净的环境，这就需要重装，二重装总是越快越好，所以有一些配置数据最好可以备份出来。
备份 先讲一下一些基本设备的数据备份&amp;hellip;&amp;hellip;
Apple Mac 使用 timeMachine 备份即可，详见 Mac 设置那几篇。移动设备 iCloud 备份
Windows 我的 Windows 只是辅助以及游戏影音功能，不设备份
配置导出 然后时重装时的配置导出&amp;hellip;&amp;hellip;
移动设备 依赖于 iCloud 的设备同步，若是想要新环境，只能自己调整配置，下载软件。
Mac 安装 brew 之后，安装 mas，然后
brew bundle dump 可以生成 brewfile，包括 brew 和 mas 中的软件，安装时 brew bundle 即可。其他软件依然是记录 md 文件
其他 zsh 和 bash 的配置在.zshrc 和.bashrc 中，备份即可，而 VScode 如下备份（要早 VSCode 中安装 code 命令行命令）
code --list-extensions &amp;gt; ext-list.txt 然后正则替换(.*)\r?\n变成--install-extension $1，最后加上 code 变成code --install-extension [扩展1] --install-extension [扩展2] ... 就可以安装了
重装指南 在网盘中存一份重装指南，分门别类存好信息即可</description>
    </item>
    
    <item>
      <title>RSP2:homeassistant</title>
      <link>https://caiyy17.github.io/posts/computer/rsp2_homeassistant/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/rsp2_homeassistant/</guid>
      <description>前言 小米的智能家庭套件可谓是物美价廉，然而它有着对于我这种强迫症非常不能接受的一个特点：非本地，所有的操作所有的智能都必须通过与小米远端的服务器进行数据交换才能够进行，这也就意味者在没有网络（路由器断了外网）或者小米服务器出故障的情况下，所有的小米设备会处于瘫痪状态；
当然，这不是最主要的问题，而是这样一来，你的设备的所有动向都会被小米收集，这是严重的个人信息的泄露活着至少说是不安全因素（所以很奇怪居然有人敢买小米的摄像头作为监控，这到底是安全还是更不安全）。
当然，这也许就是小米的目的，在后面的设置中也可以看出这一点迹象（特别是本地设备的通讯密码在高版本的米家中就不存在本地了，开玩笑呢&amp;hellip;)。而树莓派被大量的被用于智能家庭的中枢，恰好可以作为一个本地中枢，我就想也简单地玩一下。
基本框架 期望是将米家完整的接入开源智能家居平台 homeassistant（安装在树莓派上），然后通过其自带的 homekit 支持可以完整地使用 homekit 控制。其中智能全都安装在 homeassistant 上，将每个智能都以一个开关设备的形式暴露给 homekit，通过本地苹果设备实现 homekit 的远端控制。
这样米家设备被限制在 homeassistant 的管理之下，homeassistant 在本地路由器下完整地本地运行，远程完全交给 homekit（作为唯一的出口，实现设备开关和智能条目的开关，后期可以直接禁止除了本地苹果设备 ip 之外的所有向外的数据通讯）
完整构架：米家——HA——HK——远端，其中米家是独立的设备，HK 自身不用设置（只需把不同设备在 HK 中分标签页的安排好就行：分为电器及开关，环境数值传感器，安防传感器，智能条目四个标签页即可），远端通过 homekit 自带功能也不用设置（只需将本地苹果设备联入路由器并且设为 HK 中枢），四个环节中只有 HA 要独立配置。而三个连接中，米家——HA 以及 HA——HK 都是需要配置的。
设置 HA 因为 HA 有自己的树莓派系统 hassbian，自带了管理工具 hassbian-config（hassbian 基于 raspbian 的最小镜像，所以操作也差不多，因为有自带工具，就换了系统）。
hassbian 在官网下载镜像（还有基于 docker 的 hass.io，相关安装也可以在官网找到），安装时其实推荐 中文官方文档 ，有比较简单的安装流程（包括 hass.io），中文文档其实来自墨澜，她的技术站
我选择了 hassbian，按照流程：
下载 烧录（和官方系统一样） 加入无线路由其配置文件-开机等待（墙内网不好，基本都要手动 ssh 安装 HA，这点 mossbian 应该好很多） 手动 SSH 登录（同一路由器下网址 hassbian.local），用 hassbian-config 安装 HA（失败多安装几次） 安装 samba hassbian.</description>
    </item>
    
    <item>
      <title>RSP3:HA智能</title>
      <link>https://caiyy17.github.io/posts/computer/rsp3_ha%E6%99%BA%E8%83%BD/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/rsp3_ha%E6%99%BA%E8%83%BD/</guid>
      <description>前言 这里准备做一些智能的设置，因为主要是使用 HK 作为控制中心，使用 HA 作为智能中心，所以对于 HA 的各种有趣界面的设置我也就不高兴做了，有兴趣可以看看墨澜的东西，写得还是不错的而且是中文的。
设置 需要调用设备的一些功能 比如灯要设置场景，空气净化器要设置各种模式（这些都会在 HA 中以 service 的形式置入，如果没有的话就不能控制了，就是说 HA 中智能做到以一定条件一定顺序调用各种 service，如果没有这个 service 就只能自己写 platform（基于 python）独立接入这个设备或者等开发人员更新了&amp;hellip;）
在官网中 conponents 下搜索 template 可以发现许多可以自定义的组件，按需取用即可
智能场景 可以定义各种 script 和 automation，script 和 automation 将会以开关的形式在 HK 中显示。而 automation 可以调用 script。
script 本质是按照一定顺序调用一些服务，当然加入 condition 也可以检测当时的状态决定调用哪一些服务。而 automation 主要由 trigger 触发，之后会调用一些服务。
分组 可以按照官网中的知道，编写 group 文件，将 HA 的设备按照分类整理好，这样可以方便地找到需要的设备，在 customize 里面也可以将一些自动加入的设备（比如 zigbee 的传感器）的名字改成易读的名字。
PS 这样就可以实现米家的大部分功能，并且智能部分是比米家要功能更多的（但是有些功能，比如网关的广播是不行的，当然广播要联网，我的目的是米家设备不联网，就算了也罢）
若需要两地不同的 homekit 但是却有公用的设备，可以植被碗一张 sd 卡后另外制备一张 sd，设备 token 可以使用第一张 sd 卡相同的，这时候开启 homekit 服务将会是另一个 homekit，然后在 ios 中切换到另一个家添加 homekit。</description>
    </item>
    
    <item>
      <title>RSP1:基本设置</title>
      <link>https://caiyy17.github.io/posts/computer/rsp1_%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/rsp1_%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 又折腾买了个树莓派，正好右 32g 不用的 tf 卡，就准备来玩玩看可以做些什么。
安装系统 网上教程乱七八糟，最后还是官方文档比较清楚，下载系统解压后使用 etcher 烧录至 tf 卡，然后插入树莓派就可以启动了。
连接树莓派 先在根目录下加一个空白的名为 ssh 的文件让树莓派支持 ssh 连接，然后将电脑和树莓派通过网线相连。获取树莓派 ip 地址：
ping raspberrypi.local 然后就可以 ssh 连接这个树莓派，用户名&amp;quot;pi&amp;quot;，密码&amp;quot;raspberry&amp;quot;。接下来使用
sudo raspi-config 进行基础设置，更改密码，地区设置（加入 zh-CN UTF8 支持，但个人依然只有 en-GB UTF8 作为默认语言），允许 ssh，扩展储存（高级设置里扩展储存选项）
然后安装 vim，zsh 等常用的软件。
更换清华源 sudo nano /etc/apt/sources.list //注释掉原来的，加入 deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi //保存退出，然后 sudo nano /etc/apt/sources.list.d/raspi.list //注释掉原来的，加入 deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui 就可以更新了</description>
    </item>
    
    <item>
      <title>Markdown3:配合Pandoc</title>
      <link>https://caiyy17.github.io/posts/computer/md3_%E9%85%8D%E5%90%88pandoc/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/md3_%E9%85%8D%E5%90%88pandoc/</guid>
      <description>前言 从 Md1 到 Md2，基本的 Markdown 写作以及没有问题了，然后就会想用 md 解决其他的事情了，比如写学术论文，Latex 写起来太费劲了，公式还是 word 比较方便。
Pandoc 是一个开源的万能文档转换软件，可以在 pdf，md，word，html 之间转换文档格式。而装了 vscode-pandoc 后可以直接在 vscode 中使用，但是每次只能用同样的命令行参数，否则只能在终端中使用。
安装 直接 brew 安装即可，还要安装 pandoc-citeproc，vscode 插件也是一键安装。
然后是配置，word 不需要配置，html 需要配置命令行参数，在设置的 string 里面填入就行。
html 参数 --standalone --self-contained --css pandoc.css 以上转换命令中选项含义介绍如下。
“–standalone”：为目标格式文件增加合适的“header”和“footer”。如果目标格式是“HTML”，那么通过该选项可解决“由于未设置合适的字符编码，而导致的乱码问题”。 “–self-contained” ：如果目标格式是“HTML”，那么可得到如下效果：在转换得到目标 HTML 文件的过程中，会将依赖的“脚本，CSS，图片，视频”等文件的内容内嵌到目标 HTML 文件中。 “–css pandoc.css” ：使得目标格式文件最后使用“pandoc.css”文件作为 CSS 文件，否则，使用默认的 CSS 文件。 PDF 参数 pdf 需要 latex 的支持，mac 可以装 Mactex，Win 有 texlive（不过要配置环境变量）
然而当你尝试的时候就会有各种 bug，网上也有解决方案，但都不是很漂亮，所以我就放弃了这个选项&amp;hellip;&amp;hellip;
所以 最终我选择了把 md 转为 word 然后可以使用 word 的公式编辑器编写公式&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>Linux1:基本命令</title>
      <link>https://caiyy17.github.io/posts/computer/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid>
      <description>前言 感觉学一些 linux 的基本命令还是十分必要的，不仅服务器需要，Mac 也会有要求。本文介绍的一些命令，mac 里面应该都有。
关于 Linux 的更多东西，看 ArchLinux 的 wiki 是一个非常好的选择，其中文档比绝大多数教程要好。
Linux 权限 Linux 下有两种用户：普通用户和超级用户。
普通用户：在 linux 下做有限的事情。
超级用户：可以在 linux 系统下做任何事情，不受限制。
切换用户：
su [用户] Linux 权限管理 文件访问者的分类
Linux 把访问者分为 3 类。
文件和文件目录的所有者：u—User 文件和文件目录的所有者所在的组的用户：g—Group 其他用户：o—Others 文件访问权限的种类
读，写，执行（对文件而言，执行文件；对目录而言，进入目录）
文件权限值得表示方法
表示 权限 r–- 只读 -w- 仅可写 –-x 仅可执行 rw- 可读可写 -wx 可写可执行 r-x 可读可执行 rwx 可读可写可执行 —&amp;ndash; 无权限 Linux 中权限数值表示在 chmod 会用到，用三个 8 进制位表示。
Linux 基本命令 ls 格式：ls [选项] [目录或文件]
功能：对于目录，列出该目录下的所有子目录与文件；对于文件，列出文件名以及其他信息。</description>
    </item>
    
    <item>
      <title>VPS1:购买以及设置</title>
      <link>https://caiyy17.github.io/posts/computer/vps1_%E8%B4%AD%E4%B9%B0%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AEvps/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/vps1_%E8%B4%AD%E4%B9%B0%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AEvps/</guid>
      <description>前言 对于一个准备完计算机的喜欢折腾的学生来说，拥有一台自己的服务器是十分有必要的，在那上面，可以干许许多多事情。
Github 学生包 相信大家对 github 都不陌生，但 github 上除了代码管理和社区之外，github 提供的学生包也是个非常不错的东西。学生包获取方法就根据提示一步一步来就行，需要学校邮箱。
其中个人暂时用到的有：
DigitalOcean 上 50 刀的代金券 AWS 上 150 刀代金券 Namecheap 一年的免费.me 域名 这些基本都和 VPS 有关，本文主要介绍 DO 上的 VPS，这个也比较简单。
DigitalOcean 注册 DO，需要用 paypal 或者信用卡向其中充值 5 美金，就可以注册完成了。完成后，在 DO 网站中输入学生包优惠码，会发现账户变成了 55 美金，这样就可以用基础套餐 11 个月了。
然后添加 Droplets，我使用的是 centos，最基础的套餐（5 刀一个月），用校园网的话记得勾选 ipv6，然后 添加一个 sshkey （这一步很重要，不然申请完成后需要再设置这个 VPS 很多步）
然后就完成了基本操作，可以使用电脑连接服务器了。
设置防火墙 DO 提供了十分方便的防火墙设置，可以控制进出开放的端口，然后你可以只开你需要的端口，可以免去在 VPS 里面设置防火墙，甚至可以把里面的防火墙关了。
这里一般会设置几套防火墙，每一套之间是叠加的，就是最终开放的端口是所有防火墙组的开发端口的并集。可以有前段防火墙开发基本端口，然后 ss 防火墙专门开发 socks 协议使用的端口&amp;hellip;&amp;hellip;这个就看自己组合了。
我这边是开了 ssh 使用的 22 端口；网站的 443 和 1080 端口；以及 ss 或者 v2ray 使用的端口（自己设置）。如果不用网站，可以将 443 或者 1080 作为翻墙端口。</description>
    </item>
    
    <item>
      <title>VPS2:socks协议以及ss设置</title>
      <link>https://caiyy17.github.io/posts/computer/vps2_socks%E5%8D%8F%E8%AE%AE%E4%B8%8Ess%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/vps2_socks%E5%8D%8F%E8%AE%AE%E4%B8%8Ess%E8%AE%BE%E7%BD%AE/</guid>
      <description>Socks 协议 Socket Secure(SOCKS)是一个网络协议，可以通过代理服务器来路由客户端和服务器之间的数据包。一个 SOCKS 服务器可以代理 TCP 连接到任何一个 IP 地址，同时为 UDP 的数据包提供一种转发方式。 SOCKS 完成的是 OSI 模型中第五层的工作（会话层，位于表示层和传输层之间）
历史 这个协议最初由 David Koblas 创造，David Koblas 是 MIPS 计算系统的管理员，在 1992 年 MIPS 被 Silicon Graphics 接管之后，Koblas 在那年的 Usenix 安全研讨会上发表了关于 SOCKS 的一篇文章，让 SOCKS 为公众所知。
SOCKS5 协议最初是一个安全协议被用来更容易的管控防火墙和其他安全产品，在 1996 年被 IETF 所批准，并与 Aventail 公司合作开发。
用途 SOCKS 是 Circuit-level gateway（注：Circuit-level gateway 是一种防火墙）事实上的标准
另外一种 SOCKS 的使用方式是作为规避工具，允许流量绕过网络过滤来获得内容，否则就被政府，学校，一些具体国家的 web 服务堵塞。（就是翻墙&amp;hellip;）
而 shadowsocks 就是这样的一款软件。
ss 设置 说这么多，就让我们在服务器上装 ss 吧
配置环境 安装 pip，接着安装 ss。</description>
    </item>
    
    <item>
      <title>VPS3:nginx服务与Hexo博客</title>
      <link>https://caiyy17.github.io/posts/computer/vps3_%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/vps3_%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>前言 一直想做一个个人博客，但又不想在个大博客网站上写，这样很不自由，还不如微信朋友圈（其实主要是感觉 VPS 只用来挂 ss 太亏了，想玩玩&amp;hellip;）但是自己做网站代价很大，而 hexo 便是现成的可以直接挂 blog 的软件，又有丰富的主题科插件。
HEXO 安装 在 Mac 中需要安装 git 和 nodejs，这两个都在 brew 中安装就可以了，brew 安装相关具体可以看 Mac 设置 这篇文章，安装好之后便可以安装 hexo（根据官网来就行）
npm install -g hexo-cli 然后在需要建站的文件夹内：（[folder]为需要建立的文件夹名字）
$ hexo init [folder] $ cd [folder] $ npm install 然后更据提示修改_config.yml 配置文件就行。hexo 的官方文档还是相当详细的。
可以通过 git clone 在 themes 文件夹下安装各种主题，官网有提供一些主题，也可以网上搜，配置同样在各个主题文件夹的_config.yml 中，当然你也可以改动它的 css 和 js。
这里提一下 layout 是用于生成 html 的，比如博客底部的 powered by 相关字段，如果想修改可以进去找 ejs 文件中相关的代码。在我设置过程中我的 theme 生成的 html 对于 about 文件的引用就是不对的（它引用了 about.html 但是 hexo 生成的 about 是在 about/index.</description>
    </item>
    
    <item>
      <title>yubikey1:个人安全与yubikey</title>
      <link>https://caiyy17.github.io/posts/computer/yubikey1_%E4%B8%AA%E4%BA%BA%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/yubikey1_%E4%B8%AA%E4%BA%BA%E5%AE%89%E5%85%A8/</guid>
      <description>个人安全问题 如今网络十分混乱，各种信息极其容易被窃取（比如说斯诺登事件），加密和认证就显得极其重要，而 yubikey 就是这样一个简易的设备（支持 OTP、公钥加密签名、U2F 协议）。
yubikey 来自 wiki：YubiKey 是由 Yubico 生产的身份认证设备，支持一次性密码（OTP）、公钥加密和身份认证，以及由 FIDO 联盟（FIDO U2F）开发的通用第二因素（U2F）协议。它让用户可以透过提交一次性密码或是使用设备产生的公开/私密金钥来安全地登录自己的帐户。针对不支持一次性密码的网站，YubiKey 也可以存储静态密码。Facebook 使用 YubiKey 作为员工凭证；Google 同时为雇员和用户提供支持。还有一些密码管理器也支持 YubiKey。
作为键盘设备（HID） 这是它主要介绍的功能，能够模拟键盘设备向电脑输入一串生成的密码，兼容性最好。其中还包含多种模式：OTP、Static、Challenge-Response、HTOP，
OTP: KEY_ID+AES(AES_KEY, SECRET, COUNT++)即生成的密码包含明文的 KEY_ID 和对称加密的 SECRET 和计数器。第一次使用前需要把 KEY_ID，AES_KEY，SECRET 提交至验证服务器（Yubico 提供或者自己搭建），之后应用程序每次通过服务器验证密码的可靠性（解码后 SECRET 对应、COUNT 增大（防止重放攻击））。 Static: 静态密码。顾名思义，每次生成固定的一串密码（并没有什么用）。 Challenge-Response: HMAC(SECRET, INPUT)即可以通过 HID 接口给定一个输入，输入 HMAC 的计算结果。输入需要本地代码实现。 HOTP: HMAC(SECRET, COUNTER++)算法与 Challenge-Response 类似，然而使用累加计数器代替了输入，并且 HTOP 是一个标准协议，许多网站和设备都兼容该标准。 在 YubiKey 中包含两个 configuration slot，每一个 slot 可以单独配置以上模式中的其中一种，通过短触和长触来选择输入。
然而以上都是对称加密，也就是说，只要服务器端（验证服务器）的密文被泄漏，所有的信息理论上都可以进行伪造。
U2F U2F 是一个开源的认证标准协议，使用非对称加密算法，在每次需要认证是设备可以对 challenge 信息使用私钥进行签名来完成认证。作为一个开源的标准协议，Google、Dropbox 等网站都支持这种协议的两步验证，然而现阶段浏览器端仅有 Chrome 支持。
OpenPGP Smart Card YubiKey 还可以作为标准的 OpenPGP Smart Card 使用，用来存储 PGP 私钥（设备中私钥是可写不可读的，解密／签名操作在设备上完成）。</description>
    </item>
    
    <item>
      <title>yubikey2:配置和gnupg</title>
      <link>https://caiyy17.github.io/posts/computer/yubikey2_%E8%AE%BE%E7%BD%AE%E5%92%8Cgnupg/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/yubikey2_%E8%AE%BE%E7%BD%AE%E5%92%8Cgnupg/</guid>
      <description>设置 yubikey 讲完了安全模型，就可以开始设置 yubikey 了
需要设置的有这些：
次重要密码导入 slot1 Master 密码导入 slot2 yubikey 的 pin（Masterpin） 管理员 8 位 pin（特殊 pin） GPGkey（因为需要备份，我们从外部导入） PIV（Masterpin） U2F 从简单的开始
初始化 下载 yubikey manager，然后打开所有功能。在 OTP 里设置 slot1 和 slot2
U2F 在支持的网站里双重验证下添加 key，然后按一下 yubikey 就行了
PIV 下载 yubikey PIV manager，按照提示设置就行了。
GPG 这个比较复杂，单独出来说。
安装 gnupg 这是个专门用于 gpg 的软件，设置可以参考我 mac 设置那篇文章。
生成要最终导入 yubikey 的密钥 虽然有些 yubikey（比如说我的 4-NEO）不支持 4096 位密码，但主密钥还是可以生成 4096 的，最后只要把子密钥导入就行了。
gpg --full-generate-key Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection?</description>
    </item>
    
    <item>
      <title>软件1:电脑常用软件</title>
      <link>https://caiyy17.github.io/posts/computer/%E8%BD%AF%E4%BB%B61_%E7%94%B5%E8%84%91%E5%88%86%E9%85%8D%E5%92%8C%E5%B8%B8%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/%E8%BD%AF%E4%BB%B61_%E7%94%B5%E8%84%91%E5%88%86%E9%85%8D%E5%92%8C%E5%B8%B8%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>前言 本人也装过好多次电脑了，然而每次重装都要重新装软件，所以记录一下我都装了些啥软件，以免以后忘了。
列表 adobe Ps Id LR Acrobat DC 理工科软件 Clion（有可能 Xcode 的 bug 比较多，配置比较烦，用 Clion 好很多） Xcode（有很多软件会基于 Xcode 才能安装） Anaconda（python 的环境管理器，有了这个就不用 python 不同环境繁琐的依赖管理了） iTerm（命令行） VSCode（万能文本编辑器） LaTeX（论文排版） Git（代码管理） Pandoc（日常格式转换） GeoGebra（几何画板） Matlab（科学计算） 音视频软件 apple FCPX+LPX（音视频制作） Kontakt（软音源） 多媒体 audirvana plus（音乐播放） IINA（视频播放） Bluray player（蓝光播放） Foobar2000（Win/音乐播放） Potpalyer（Win/视频播放） Cyberlink（Win/蓝光播放） 工具 brew（macos 的包管理器）
VMware (Mac&amp;amp;Win/虚拟机)
其他小工具
日常 QQ 微信 百度云 steam chrome Office PPSSPP </description>
    </item>
    
    <item>
      <title>软件2:VSC</title>
      <link>https://caiyy17.github.io/posts/computer/%E8%BD%AF%E4%BB%B62_vsc%E8%AE%BE%E7%BD%AE%E4%BB%A5%E5%8F%8Atexlive%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/%E8%BD%AF%E4%BB%B62_vsc%E8%AE%BE%E7%BD%AE%E4%BB%A5%E5%8F%8Atexlive%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 前面讲的所有软件中，我想重点讲一下 VSCode 这个软件，简直神器，这是微软发布的一款轻量级的编辑器，但拥有非常多扩展功能，而且原生自带 git 支持，非常适合平时写写文章，脚本和轻量级的程序。特别是平时写文章，非常地好用，三大主流系统通用啊！
具体编程累软件安装参见 Mac 篇
安装 按照官网下载就行了，然后可以下载各种插件，都在插件商店里面有，下载完重新加载一下就行，而卸载插件也是一键式的。插件也会分文件夹装在 VSC 生成的一个隐藏文件夹中，不会乱跑，Windows 和 Mac 都在用户文件夹下的.vscode\extensions 里面，当然也可以改目录。
设置 VSC 的设置也是越来越方便了，当然本质还是一个.json 文件，应该一看就可以看懂，设置分三种：用户设置，工作区设置和文件夹设置。
其中用户设置保存在程序中（setting.json 可以通过打开设置，然后查看文件路径得知，这样就可以备份出来了）；工作区设置保存在.code-workspace 文件中，可以自己指定存的地方；文件夹设置在本文件夹下的.vscode\setting.json 里面。
git 打开文件夹后，在 VSC 的 git 那一栏下初始化 git 仓库。然后在集成的终端内输入：
git remote add origin https://github.com/XXX.git git pull origin master 结下来发布时有可能要输入密码，照着做就行。
不想输入密码就：
git config --global credential.helper store 插件推荐 主题 Bracket Pair One Dark Pro Code runner Markdown Markdown all in one Markdown-preview-enhanced vscode-pandoc 语言（按需求装） Latex Workshop 其他 Quick task Markdown 部分参见我关于 Markdown 的三篇博文。</description>
    </item>
    
    <item>
      <title>Mac新机设置</title>
      <link>https://caiyy17.github.io/posts/computer/mac%E6%96%B0%E6%9C%BA%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/mac%E6%96%B0%E6%9C%BA%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 新的 mbp2018 总算到了，这也是我自己的第一台苹果电脑，自然要熟悉好一会儿，在此记录下我的折腾过程。
基础：系统偏好设置 在设置中，我增加了这些东西
调度中心：使窗口按应用程序成组
调度中心：设置触发角（左下角桌面，右下角关闭屏幕）
节能：屏幕不关闭
安全与隐私：打开防火墙
通知：设定哪些程序可以通知
键盘：文本取消自动纠正与智能引号
触控板：功能全勾上
iCloud：功能全勾上
扩展：&amp;ldquo;今天&amp;quot;中显示的内容
命令行设置显示全路径
defaults write com.apple.finder _FXShowPosixPathInTitle -bool TRUE; killall Finder 更改截屏保存地址
defaults write com.apple.screencapture location &amp;#34;路径&amp;#34;; killalll SyatemUIserve Finder 偏好设置
边栏-&amp;gt;全勾上
高级-&amp;gt;勾选&amp;quot;显示所有文件扩展名&amp;quot;和&amp;quot;按名称排序时保持文件夹在顶部&amp;rdquo;
顶部 显示-&amp;gt;显示标签页栏，显示状态栏
在任意文件夹空白处-&amp;gt;右键查看显示选项-&amp;gt;改设置并用作默 可以作用于之后新建的文件夹
目前设置： 排列方式：无；排序方式：名称；显示项目简介；显示图标预览
文本编辑偏好设置
新建文稿-&amp;gt;格式-&amp;gt;纯文本
新建文稿-&amp;gt;文本取消自动纠正与智能引号
打开和储存-&amp;gt;不自动添加.txt 扩展名
基础：几个好用的快捷键 command+delete 删除；command+shift+delete 清空垃圾箱 command+q 退出程序；command+w 退出当前标签页 command+i 显示信息；command+o 打开文件 command+Up 上一级目录；command+Down 下一级目录 command+control+F 全屏 command+T 新建标签页；command+N 新建窗口；command+shift+N 新建文件夹 其他捷径看键盘偏好设置 Finder 快捷键看工具栏中的标注 触控板使用看触控板偏好设置 command+space：spotlight 搜索 按住绿色全屏按钮可以实现分屏 基础：安装日常应用（见软件篇） 进阶：安装编程相关应用并配置 Xcode+Clion</description>
    </item>
    
    <item>
      <title>Markdown2:转换及发布</title>
      <link>https://caiyy17.github.io/posts/computer/md2_%E8%BD%AC%E6%8D%A2%E5%8F%8A%E5%8F%91%E5%B8%83/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/md2_%E8%BD%AC%E6%8D%A2%E5%8F%8A%E5%8F%91%E5%B8%83/</guid>
      <description>前言 为了可以用自己喜欢的排版风格排版 Markdown，需要将其转换成其他有丰富排版功能的格式，最重要的无非是 html 和 tex，本文主要讲 html 的转换。
转至 html 后便可以配合已经编写好的.css 文件，统一排版成自己想要的格式。便可以发布在自己的网站上了。然而自己便携插件还是有些困难，好在有 hexo 或者 markdownhere 等软件和插件的帮助。前者可以帮助我们制作博客，后者可以直接在 chrome 中将 markdown 原文在公众号网站中转换为带格式的文本。
之后就不需要麻烦的公众号编辑器，只需要每次写 Markdown 就行了。
Markdown 对 html 的支持 这里说一下 Markdown 原生对 html 的支持。Markdown 的语法默认有对应的 html 语法，对应如下：(html 闭合部分省略，详细结构可以查 html 相应格式)
Markdown html 段落（两个换行符） &amp;lt;p&amp;gt; x 级标题 &amp;lt;nx&amp;gt; 无序列表 &amp;lt;ul&amp;gt; 有序列表 &amp;lt;ol&amp;gt; 代码块 &amp;lt;code&amp;gt; 引用 &amp;lt;blockquote&amp;gt; 分割线 &amp;lt;hr/&amp;gt; 表格 &amp;lt;table&amp;gt; 链接 &amp;lt;a&amp;gt; 图片 &amp;lt;img&amp;gt; *强调 &amp;lt;em&amp;gt; **强调 &amp;lt;strong&amp;gt; 而在 Markdown 中也可以自由插入 html 的代码，转换器会在转换的时候保留 html 的代码保持不动（有可能需要设置一下）。例如&amp;lt;br/&amp;gt;</description>
    </item>
    
    <item>
      <title>Markdown1:语法</title>
      <link>https://caiyy17.github.io/posts/computer/md1_%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/md1_%E8%AF%AD%E6%B3%95/</guid>
      <description>前言 本人现在大学生一枚，由于自己作为小白又总喜欢瞎折腾一些东西，所以一直想自己写一些个人博客来记录一下自己的折腾历史，以防以后就忘了怎么操作。
既然是写博客，又不想自己人工排版，第一篇就以 Markdown 的语法开始吧。
Markdown 概述 Markdown 的宗旨便是易写易读，一份 Markdown 的文档就算是直接纯文本形式发布也不会让人看起来别扭，但又可以很方便的进行简单的排版，特别是转成 html 格式在互联网上十分方便。本人就计划用 Markdown 配合 html 与 css 将自己的文章发在微信公众号上。
在这里吐槽一下：
微信公众号的各种排版工具和网站实在是太麻烦了，虽然它们也许可以实现很多非常花哨的功能，但是一点点调整一点点排版十分的反人类（也许也是我不会用&amp;hellip;），又不是做一张海报，我觉得一个非常简洁的工具才是比较好的。
还有 Latex 的编辑效率个人感觉并不高，公式编辑其实 Word 自带的公式编辑器（不是 mathtype）非常快捷，浮动体也很不友好，Word 嵌入式就好很多（虽然有时候占地方，但有强迫症啊&amp;hellip;）大概就只有交叉引用会比 Word 方便了。
吐槽完毕&amp;hellip;
Markdown 语法 好了，我们正式开始。
换行 和 Latex 差不多 Markdown 使用一个空行来换行
例：
这是一个段落这是一个段落效果：
这是一个段落
这是一个段落
当然，Markdown 也可以使用在行末尾加上两个或以上空格加来换行。（其实是在末尾加了&amp;lt;br/&amp;gt;）
这是一个段落（末尾有两个空格）这是一个段落效果：
这是一个段落
这是一个段落
会发现这样的的强制换行间距与空行换行不一样
标题 Markdown 支持 6 级标题，分别用不一样数量的#来标记注意一定要在#后面加空格
例：
# 这是H1## 这是H2###### 这是H6效果：
这是 H1 这是 H2 这是 H6 引用 引用和 email 中的很像，在引用区块的每行前面加一个或多个&amp;gt;（几个就是几级）</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>树莓派 on caiyy17</title>
    <link>https://caiyy17.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/</link>
    <description>Recent content in 树莓派 on caiyy17</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://caiyy17.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RSP2:homeassistant</title>
      <link>https://caiyy17.github.io/posts/computer/rsp2_homeassistant/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/rsp2_homeassistant/</guid>
      <description>前言 基本框架 设置 HA 米家——HA  获取 token   HA——HK  需要设备返回的一些传感器数值   PS 暂时  前言 小米的智能家庭套件可谓是物美价廉，然而它有着对于我这种强迫症非常不能接受的一个特点：非本地，所有的操作所有的智能都必须通过与小米远端的服务器进行数据交换才能够进行，这也就意味者在没有网络（路由器断了外网）或者小米服务器出故障的情况下，所有的小米设备会处于瘫痪状态；
当然，这不是最主要的问题，而是这样一来，你的设备的所有动向都会被小米收集，这是严重的个人信息的泄露活着至少说是不安全因素（所以很奇怪居然有人敢买小米的摄像头作为监控，这到底是安全还是更不安全）。
当然，这也许就是小米的目的，在后面的设置中也可以看出这一点迹象（特别是本地设备的通讯密码在高版本的米家中就不存在本地了，开玩笑呢&amp;hellip;)。而树莓派被大量的被用于智能家庭的中枢，恰好可以作为一个本地中枢，我就想也简单地玩一下。
基本框架 期望是将米家完整的接入开源智能家居平台 homeassistant（安装在树莓派上），然后通过其自带的 homekit 支持可以完整地使用 homekit 控制。其中智能全都安装在 homeassistant 上，将每个智能都以一个开关设备的形式暴露给 homekit，通过本地苹果设备实现 homekit 的远端控制。
这样米家设备被限制在 homeassistant 的管理之下，homeassistant 在本地路由器下完整地本地运行，远程完全交给 homekit（作为唯一的出口，实现设备开关和智能条目的开关，后期可以直接禁止除了本地苹果设备 ip 之外的所有向外的数据通讯）
完整构架：米家——HA——HK——远端，其中米家是独立的设备，HK 自身不用设置（只需把不同设备在 HK 中分标签页的安排好就行：分为电器及开关，环境数值传感器，安防传感器，智能条目四个标签页即可），远端通过 homekit 自带功能也不用设置（只需将本地苹果设备联入路由器并且设为 HK 中枢），四个环节中只有 HA 要独立配置。而三个连接中，米家——HA 以及 HA——HK 都是需要配置的。
设置 HA 因为 HA 有自己的树莓派系统 hassbian，自带了管理工具 hassbian-config（hassbian 基于 raspbian 的最小镜像，所以操作也差不多，因为有自带工具，就换了系统）。
hassbian 在官网下载镜像（还有基于 docker 的 hass.io，相关安装也可以在官网找到），安装时其实推荐 中文官方文档 ，有比较简单的安装流程（包括 hass.</description>
    </item>
    
    <item>
      <title>RSP3:HA智能</title>
      <link>https://caiyy17.github.io/posts/computer/rsp3_ha%E6%99%BA%E8%83%BD/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/rsp3_ha%E6%99%BA%E8%83%BD/</guid>
      <description>前言 设置  需要调用设备的一些功能 智能场景 分组   PS  前言 这里准备做一些智能的设置，因为主要是使用 HK 作为控制中心，使用 HA 作为智能中心，所以对于 HA 的各种有趣界面的设置我也就不高兴做了，有兴趣可以看看墨澜的东西，写得还是不错的而且是中文的。
设置 需要调用设备的一些功能 比如灯要设置场景，空气净化器要设置各种模式（这些都会在 HA 中以 service 的形式置入，如果没有的话就不能控制了，就是说 HA 中智能做到以一定条件一定顺序调用各种 service，如果没有这个 service 就只能自己写 platform（基于 python）独立接入这个设备或者等开发人员更新了&amp;hellip;）
在官网中 conponents 下搜索 template 可以发现许多可以自定义的组件，按需取用即可
智能场景 可以定义各种 script 和 automation，script 和 automation 将会以开关的形式在 HK 中显示。而 automation 可以调用 script。
script 本质是按照一定顺序调用一些服务，当然加入 condition 也可以检测当时的状态决定调用哪一些服务。而 automation 主要由 trigger 触发，之后会调用一些服务。
分组 可以按照官网中的知道，编写 group 文件，将 HA 的设备按照分类整理好，这样可以方便地找到需要的设备，在 customize 里面也可以将一些自动加入的设备（比如 zigbee 的传感器）的名字改成易读的名字。
PS 这样就可以实现米家的大部分功能，并且智能部分是比米家要功能更多的（但是有些功能，比如网关的广播是不行的，当然广播要联网，我的目的是米家设备不联网，就算了也罢）</description>
    </item>
    
    <item>
      <title>RSP1:基本设置</title>
      <link>https://caiyy17.github.io/posts/computer/rsp1_%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/rsp1_%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 又折腾买了个树莓派，正好右 32g 不用的 tf 卡，就准备来玩玩看可以做些什么。
安装系统 网上教程乱七八糟，最后还是官方文档比较清楚，下载系统解压后使用 etcher 烧录至 tf 卡，然后插入树莓派就可以启动了。
连接树莓派 先在根目录下加一个空白的名为 ssh 的文件让树莓派支持 ssh 连接，然后将电脑和树莓派通过网线相连。获取树莓派 ip 地址：
ping raspberrypi.local 然后就可以 ssh 连接这个树莓派，用户名&amp;quot;pi&amp;quot;，密码&amp;quot;raspberry&amp;quot;。接下来使用
sudo raspi-config 进行基础设置，更改密码，地区设置（加入 zh-CN UTF8 支持，但个人依然只有 en-GB UTF8 作为默认语言），允许 ssh，扩展储存（高级设置里扩展储存选项）
然后安装 vim，zsh 等常用的软件。
更换清华源 sudo nano /etc/apt/sources.list //注释掉原来的，加入 deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi //保存退出，然后 sudo nano /etc/apt/sources.list.d/raspi.list //注释掉原来的，加入 deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui 就可以更新了</description>
    </item>
    
  </channel>
</rss>

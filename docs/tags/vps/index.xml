<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VPS on caiyy17</title>
    <link>https://caiyy17.github.io/tags/vps/</link>
    <description>Recent content in VPS on caiyy17</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://caiyy17.github.io/tags/vps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VPS2:githubio博客和VPN</title>
      <link>https://caiyy17.github.io/posts/computer/vps2_%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/vps2_%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE/</guid>
      <description>前言 之前使用 VPS 搭建个人博客和代理，但是这样需要时刻维护服务器，其实还是占用了不少时间和精力，为了最方便地使用，目前使用 hugo 博客搭配 githubio 使用，而代理则使用成品代理，有专人替你维护。
HUGO 安装 HUGO 是基于 go 的博客框架，编译起来比之前基于 node 的 js 框架要快非常多。
Install Hugo
brew install hugo 然后选一个主题即可，我这边选择的是 PaperMod，使用 git submodule 安装：
Install PaperMod
部署到 Github 设置参照 theme 给的例子即可，需要注意的是部署到 github 需要将
publishDir = &amp;#34;docs&amp;#34; 加在配置中，然后在 githubio 设置中将发布路径改为 docs，这样不用设置另外分支，非常方便。
生成网页 博客直接在 posts 中用 md 编写即可，需要发布时先用 hugo 命令生成，然后同步 github 的 repo
hugo -D 在 VSCode 和部署中同时看到正确的图片 由于 Hugo 生成网页的路径和 VSCode 本地路径不一致，导致只有一个地方可以看到正确的图片。解决办法是使用 Hugo 的 Page Bundles。Hugo 的 Page Bundles 允许你将内容页面和与之相关的资源（如图片）组织在同一文件夹下。例如，如果你有以下的目录结构：（注意 md 文件必须使用 index 作为文件名，这样 Hugo 才不会为这个 md 文件单独加一层文件夹）</description>
    </item>
    
    <item>
      <title>VPS1:购买以及设置</title>
      <link>https://caiyy17.github.io/posts/computer/vps1_%E8%B4%AD%E4%B9%B0%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AEvps/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://caiyy17.github.io/posts/computer/vps1_%E8%B4%AD%E4%B9%B0%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AEvps/</guid>
      <description>前言 拥有一台自己的服务器是十分有必要的。
连接服务器 Windows 可以用 putty，使用 ssh 登陆，然后在 ssh 设置中添加自己的私钥，就可以连了。
Mac 的话直接用系统自带的终端
ssh -p [port] [user]@[ip] 用户设置 默认登陆的是 root 用户，但是这样是不安全的，我们可以建立管理员用户，然后只允许管理员用户切换到 root，再禁止 root 的 ssh 登陆，这样我们要使用 root 就只能先 ssh 登陆管理员账户，然后再使用密码切换到 root。
  新建一个用户
useradd [user]   将用户添加至管理员组
usermod –g wheel [user]   修改/etc/pam.d/su 配置
去掉这行的注释，就完成了禁止普通用户切换 root
#auth required pam_wheel.so use_uid   修改/etc/ssh/sshd_config
将 PermitRootLogin 选项改为
PermitRootLogin no   这样就禁止了 root 直接登陆。
ssh 设置 这个在用户文件夹下的.ssh/authorized_keys 中可以添加 ssh 的公钥，然后就可以使用不同的私钥链接服务器了，保险起见得保证 从修改文件到确认可以用修改后的钥匙登陆前 最好都保持有一个终端窗口连在服务器上，这样玩意出问题还可以再次改那个文件。</description>
    </item>
    
  </channel>
</rss>
